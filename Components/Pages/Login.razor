@page "/"
@page "/login"
@rendermode InteractiveServer
@inject AccountManager AccountManager
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using GimpiesBlazor.Data
@using GimpiesBlazor.Handlers
@using GimpiesBlazor.Managers
@using GimpiesBlazor.Models.ViewModels
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Http
@using System.Text.RegularExpressions

<MudPaper Class="pa-10 mx-auto" MaxWidth="400px">
    <MudText Typo="Typo.h5" Align="Align.Center">Gimpies Login</MudText>
    <MudForm Model="Model" OnInvalidSubmit="async () => await Authenticate()">
        <MudTabs @bind-ActivePanelIndex="_activeTab" Class="mt-4" Centered="true">
            <MudTabPanel Text="Gebruikersnaam">
                <MudTextField @bind-Value="Model.Username" Label="Gebruikersnaam" Required="true" RequiredError="Vul uw gebruikersnaam in"
                              Validation="@(new Func<string, IEnumerable<string>>(ValidationManager.ValidUsername))" />
            </MudTabPanel>
            <MudTabPanel Text="E-mail">
                <MudTextField @bind-Value="Model.Email" Label="E-Mail" Required="true" RequiredError="Vul uw E-Mail in" InputType="InputType.Email"
                              Validation="@(new Func<string, IEnumerable<string>>(ValidationManager.ValidEmail))" />
            </MudTabPanel>
        </MudTabs>

        <MudTextField @bind-Value="Model.Password" Label="Wachtwoord" InputType="InputType.Password" Required="true" RequiredError="Vul uw wachtwoord in"
                      Validation="@(new Func<string, IEnumerable<string>>(ValidationManager.ValidPassword))" />

        <MudButton Type="Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" FullWidth="true">Inloggen</MudButton>
    </MudForm>

    <MudText Typo="Typo.body2" Align="Align.Center" Class="mt-4">
        Nog geen account? <MudLink Href="/registreren" Color="Color.Primary">Registreer hier</MudLink>
    </MudText>
</MudPaper>

@code {
    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private int _activeTab { get; set; } = 0;

    private MarkupString? _notifyMessage;

    private async Task Authenticate()
    {
        var input = _activeTab == 0 ? Model.Username : Model.Email;

        if (string.IsNullOrEmpty(input) || string.IsNullOrEmpty(Model.Password))
        {
            _notifyMessage = new MarkupString("Vul alle velden correct in!");
            return;
        }

        try
        {
            var account = await AccountManager.CheckAccountAsync(input, Model.Password);

            if (account is null)
            {
                _notifyMessage = new MarkupString("Één of meerdere inloggegevens onjuist!");
                return;
            }

            SessionManager.SetAccount(account);

            var claims = new List<Claim>
            {
                new(ClaimTypes.Name, account.Username),
            };

            foreach (var permission in Authorization.GetPermissions())
            {
                if (SessionManager.HasPermission(permission))
                {
                    claims.Add(new Claim(permission, "true"));
                }
            }

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);

            await HttpContextAccessor.HttpContext!.SignInAsync(principal);

            NavigationManager.NavigateTo("/dashboard");
        }
        catch (InvalidOperationException)
        {
            _notifyMessage = ErrorHandler.AddErrorCode("Er is een fout opgetreden bij het inloggen!", ProgramError.DatabaseError);
        }
        catch (Exception)
        {
            _notifyMessage = ErrorHandler.AddErrorCode("Er is een fout opgetreden bij het inloggen!", ProgramError.UnknownError);
        }
    }
}
