@page "/"
@page "/login"
@rendermode InteractiveAuto
@inject AccountManager AccountManager
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider authStateProvider

@using System.Security.Claims
@using GimpiesBlazor.Authentication
@using GimpiesBlazor.Data
@using GimpiesBlazor.Handlers
@using GimpiesBlazor.Managers
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Http

<MudPaper Class="pa-10 mx-auto" MaxWidth="400px">
    <MudText Typo="Typo.h5" Align="Align.Center">Gimpies Login</MudText>
    <MudForm @ref="_form" Model="model">
        <MudTabs @bind-ActivePanelIndex="ActiveTab" Class="mt-4" Centered="true">
            <MudTabPanel Text="Gebruikersnaam">
                <MudTextField @bind-Value="model.Username" Label="Gebruikersnaam" Required="true" RequiredError="Vul uw gebruikersnaam in"
                              Validation="@(new Func<string, IEnumerable<string>>((username) => ValidationManager.ValidUsername(username, true)))" />
            </MudTabPanel>
            <MudTabPanel Text="E-mail">
                <MudTextField @bind-Value="model.Email" Label="E-Mail" Required="true" RequiredError="Vul uw E-Mail in" InputType="InputType.Email"
                    Validation="@(new Func<string, IEnumerable<string>>(ValidationManager.ValidEmail))" />
            </MudTabPanel>
        </MudTabs>

        <MudTextField @bind-Value="model.Password" Label="Wachtwoord" InputType="InputType.Password" Required="true" RequiredError="Vul uw wachtwoord in"
            Validation="@(new Func<string, IEnumerable<string>>((password) => ValidationManager.ValidPassword(password, true)))" />

        <MudButton OnClick="@(async () => await Authenticate())" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" FullWidth="true">Inloggen</MudButton>
    </MudForm>

    <MudText Typo="Typo.body2" Align="Align.Center" Class="mt-4">
        Nog geen account? <MudLink Href="/register" Color="Color.Primary">Registreer hier</MudLink>
    </MudText>
</MudPaper>

@code {
    private int ActiveTab { get; set; } = 0;
    private MudForm? _form { get; set; }

    private class Model()
    {
        public string Username { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public string Role { get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        var input = ActiveTab == 0 ? model.Username : model.Email;

        if (string.IsNullOrEmpty(input) || string.IsNullOrEmpty(model.Password))
        {
            Snackbar.Add("Vul alle velden correct in!", Severity.Warning);
            return;
        }

        try
        {
            var account = await AccountManager.CheckAccountAsync(input, model.Password);

            if (account is null)
            {
                Snackbar.Add("Één of meerdere inloggegevens onjuist!", Severity.Warning);
                return;
            }

            SessionManager.SetAccount(account);

            var customAuthenticationStateProvider = (CustomAuthenticationStateProvider)authStateProvider;

            await customAuthenticationStateProvider.UpdateAuthenticationState(new UserSession
                {
                    Username = account.Username,
                    Email = account.Email,
                    Role = account.Role.RoleName
                });

            NavigationManager.NavigateTo("/dashboard", true);
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine($"OORZAAK db: {ex.Message}");
            Snackbar.Add("Er is een fout opgetreden bij het inloggen!", Severity.Error, options =>
            {
                options.Action = "Meer info";
                options.OnClick = snackbar =>
                {
                    NavigationManager.NavigateTo("/error/" + (int)ProgramError.DatabaseError);
                    return Task.CompletedTask;
                };
            });

        }
        catch (Exception ex)
        {
            Console.WriteLine($"OORZAAK: {ex.ToString()}");
            Snackbar.Add("Er is een fout opgetreden bij het inloggen!", Severity.Error, options =>
            {
                options.Action = "Meer info";
                options.OnClick = snackbar =>
                {
                    NavigationManager.NavigateTo("/error/" + (int)ProgramError.UnknownError);
                    return Task.CompletedTask;
                };
            });
        }
        finally
        {
            await _form!.ResetAsync();
        }
    }
}
