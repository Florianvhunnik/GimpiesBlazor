@page "/login"
@inject AccountManager AccountManager
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider authStateProvider
@attribute [AllowAnonymous]

@using GimpiesBlazor.Authentication
@using GimpiesBlazor.Data
@using GimpiesBlazor.Handlers
@using GimpiesBlazor.Managers
@using Microsoft.AspNetCore.Authorization

<MudPaper Class="pa-10 mx-auto" MaxWidth="400px">
    <MudText Typo="Typo.h5" Align="Align.Center">Gimpies Login</MudText>
    <MudForm @ref="_form" Model="model">
        <MudTabs @bind-ActivePanelIndex="ActiveTab" Class="mt-4" Centered="true">
            <MudTabPanel Text="Gebruikersnaam">
                <MudTextField @bind-Value="model.Username" Label="Gebruikersnaam" Required="true" RequiredError="Vul uw gebruikersnaam in"
                    Validation="@(new Func<string, IEnumerable<string>>((username) => ValidationManager.ValidUsername(username, true)))" />
            </MudTabPanel>
            <MudTabPanel Text="E-mail">
                <MudTextField @bind-Value="model.Email" Label="E-Mail" Required="true" RequiredError="Vul uw E-Mail in" InputType="InputType.Email"
                    Validation="@(new Func<string, IEnumerable<string>>(ValidationManager.ValidEmail))" />
            </MudTabPanel>
        </MudTabs>

        <MudTextField @bind-Value="model.Password" Label="Wachtwoord" InputType="InputType.Password" Required="true" RequiredError="Vul uw wachtwoord in"
            Validation="@(new Func<string, IEnumerable<string>>((password) => ValidationManager.ValidPassword(password, true)))" />

        <MudButton OnClick="@(async () => await Authenticate())" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" FullWidth="true">Inloggen</MudButton>
    </MudForm>

    <MudText Typo="Typo.body2" Align="Align.Center" Class="mt-4">
        Nog geen account? <MudLink Href="/register" Color="Color.Primary">Registreer hier</MudLink>
    </MudText>
</MudPaper>

@code {
    private int ActiveTab { get; set; } = 0;
    private MudForm? _form { get; set; }
    private const int _allowedAttempts = 5;
    private int _loginAttempts = 0;
    private DateTime? _blockTime;

    private class Model()
    {
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
    }

    private Model model = new();

    private async Task Authenticate()
    {
        if (_blockTime.HasValue && DateTime.Now < _blockTime.Value)
        {
            Snackbar.Add($"Je bent geblokkeerd tot {_blockTime.Value:HH:mm}. Probeer het later opnieuw.", Severity.Error);
            return;
        }

        if (_loginAttempts >= _allowedAttempts)
        {
            _blockTime = DateTime.Now.AddMinutes(5);
            Snackbar.Add("Je hebt het maximale aantal inlogpogingen bereikt. Probeer het later opnieuw.", Severity.Error);
            return;
        }

        var input = ActiveTab == 0 ? model.Username : model.Email;

        if (string.IsNullOrEmpty(input) || string.IsNullOrEmpty(model.Password))
        {
            Snackbar.Add("Vul alle velden correct in!", Severity.Warning);
            return;
        }

        try
        {
            var (account, isActive) = await AccountManager.CheckAccountAsync(input, model.Password);

            if (!isActive)
            {
                Snackbar.Add("Dit account is niet actief!", Severity.Warning);
                return;
            }

            if (account is null)
            {
                _loginAttempts++;
                Snackbar.Add("Één of meerdere inloggegevens onjuist!", Severity.Warning);
                return;
            }

            _loginAttempts = 0;

            SessionManager.SetAccount(account);

            var customAuthStateProvider = (CustomAuthStateProvider)authStateProvider;

            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    Username = account.Username,
                    Email = account.Email,
                    Role = account.Role.RoleName,
                    ProfilePicture = account.ProfilePicture.Link
                });

            Snackbar.Add("Succesvol ingelogd!", Severity.Success);

            NavigationManager.NavigateTo("/dashboard", true);
        }
        catch (InvalidOperationException)
        {
            Snackbar.Add("Er is een fout opgetreden bij het inloggen!", Severity.Error, options =>
            {
                options.Action = "Meer info";
                options.OnClick = snackbar =>
                {
                    NavigationManager.NavigateTo("/error/" + (int)ProgramError.DatabaseError);
                    return Task.CompletedTask;
                };
            });

        }
        catch (Exception)
        {
            Snackbar.Add("Er is een fout opgetreden bij het inloggen!", Severity.Error, options =>
            {
                options.Action = "Meer info";
                options.OnClick = snackbar =>
                {
                    NavigationManager.NavigateTo("/error/" + (int)ProgramError.UnknownError);
                    return Task.CompletedTask;
                };
            });
        }
        finally
        {
            await _form!.ResetAsync();
        }
    }
}
