@page "/register"
@inject AccountManager AccountManager
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@using GimpiesBlazor.Data
@using GimpiesBlazor.Handlers
@using GimpiesBlazor.Managers

<MudPaper Class="pa-10 mx-auto" MaxWidth="400px">
    <MudText Typo="Typo.h5" Align="Align.Center">Gimpies Registreren</MudText>
    <MudForm @ref="_form" Model="model">
        <MudTextField Class="mb-1" T="string" @bind-Value="model.Username" Label="Gebruikersnaam"
                      Validation="@(new Func<string, IEnumerable<string>>((username) => ValidationManager.ValidUsername(username, false)))" />
        <MudTextField Class="mb-1" T="string" @bind-Value="model.Email" Label="E-Mail" InputType="InputType.Email"
            Validation="@(new Func<string, IEnumerable<string>>(ValidationManager.ValidEmail))" />
        <MudTextField Class="mb-1" T="string" @bind-Value="model.Password" Label="Wachtwoord" Required="true" RequiredError="Vul uw wachtwoord in"
                      Validation="@(new Func<string, IEnumerable<string>>((password) => ValidationManager.ValidPassword(password, false)))" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" InputType="@PasswordInput" OnAdornmentClick="TogglePasswordView" />
        <MudTextField Class="mb-1" T="string" @bind-Value="model.PasswordRepeat" Label="Bevestig Wachtwoord"
                      Validation="@(new Func<string, IEnumerable<string>>(value => ValidationManager.MatchPassword(model.Password, value)))" Adornment="Adornment.End" InputType="@PasswordInput" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordView" />

        <MudButton OnClick="@(async () => await RegisterUser())" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" FullWidth="true">Registreren</MudButton>
    </MudForm>

    <MudText Typo="Typo.body2" Align="Align.Center" Class="mt-4">
        Heb je al een account? <MudLink Href="/login" Color="Color.Primary">Inloggen</MudLink>
    </MudText>
</MudPaper>

@code {
    private MudForm? _form;

    private class Model()
    {
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string PasswordRepeat { get; set; } = string.Empty;
    }

    private Model model = new Model();

    private async Task RegisterUser()
    {
        if (string.IsNullOrEmpty(model.Username) || string.IsNullOrEmpty(model.Email) || string.IsNullOrEmpty(model.Password) || string.IsNullOrEmpty(model.PasswordRepeat))
        {
            Snackbar.Add("Vul alle velden correct in!", Severity.Warning);
            return;
        } 
        if (model.Password != model.PasswordRepeat)
        {
            Snackbar.Add("Wachtwoorden komen niet overeen!", Severity.Warning);
            return;
        }
        if (!model.Email.Contains("@") || !model.Email.Contains("."))
        {
            Snackbar.Add("Vul een geldig e-mailadres in!", Severity.Warning);
            return;
        }

        try
        {
            var account = await AccountManager.GetAccount(model.Username, model.Email);

            if (account != null)
            {
                Snackbar.Add("Deze gebruikersnaam en / of E-Mail is al in gebruik!", Severity.Warning, options =>
                {
                    options.Action = "Inloggen";
                    options.OnClick = snackbar =>
                    {
                        NavigationManager.NavigateTo("/login");
                        return Task.CompletedTask;
                    };
                });
            }
            else
            {
                await AccountManager.RegisterUserAsync(model.Username, model.Email, model.Password, "user");

                Snackbar.Add("Succesvol geregistreerd!", Severity.Success, options =>
                {
                    options.Action = "Inloggen";
                    options.OnClick = snackbar =>
                    {
                        NavigationManager.NavigateTo("/login");
                        return Task.CompletedTask;
                    };
                });
            }
        }
        catch (InvalidOperationException)
        {
            Snackbar.Add("Er is een fout opgetreden bij het registreren!", Severity.Error, options =>
            {
                options.Action = "Meer info";
                options.OnClick = snackbar =>
                {
                    NavigationManager.NavigateTo("/error/" + (int)ProgramError.DatabaseError);
                    return Task.CompletedTask;
                };
            });
        }
        catch (Exception)
        {
            Snackbar.Add("Er is een fout opgetreden bij het registreren!", Severity.Error, options =>
            {
                options.Action = "Meer info";
                options.OnClick = snackbar =>
                {
                    NavigationManager.NavigateTo("/error/" + (int)ProgramError.UnknownError);
                    return Task.CompletedTask;
                };
            });
        }
        finally
        {
            await _form!.ResetAsync();
        }
    }

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordView()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

}
