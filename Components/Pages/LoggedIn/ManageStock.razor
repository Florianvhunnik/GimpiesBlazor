@page "/manage_stock"
@inject ISnackbar Snackbar
@inject StockManager StockManager
@inject IDialogService DialogService

@using GimpiesBlazor.Components.Dialogs
@using GimpiesBlazor.Managers
@using GimpiesBlazor.Models.Entities

<AuthorizeView>
    <Authorized>
        <PageTitle>Schoenen beheren</PageTitle>

        <MudTable Items="_stockList"
                  Hover="true"
                  Loading="@_loadingStock"
                  LoadingProgressColor="MudBlazor.Color.Primary"
                  CanCancelEdit="true"
                  EditTrigger="TableEditTrigger.EditButton"
                  EditButtonPosition="TableEditButtonPosition.End"
                  RowEditCommit="async (changes) => await ChangesMade(changes)"
                  MultiSelection="true"
                  @bind-SelectedItems="_selectedStock">
            <ToolBarContent>
                <MudButton Size="@Size.Large" StartIcon="@Icons.Material.Filled.Refresh" OnClick="LoadStock"></MudButton>
                <MudButton Size="@Size.Large" Color="MudBlazor.Color.Success" StartIcon="@Icons.Material.Filled.AddBox" OnClick="AddShoe"></MudButton>
                <MudButton Size="@Size.Large" Color="MudBlazor.Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="DeleteShoe"></MudButton>
                <MudText Typo="Typo.h6">Voorraad</MudText>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Merk</MudTh>
                <MudTh>Type</MudTh>
                <MudTh>Maat</MudTh>
                <MudTh>Kleur</MudTh>
                <MudTh>Aantal</MudTh>
                <MudTh>Prijs</MudTh>
            </HeaderContent>
            <RowTemplate Context="stock">
                <MudTd>@stock.Brand.Name</MudTd>
                <MudTd>@stock.ShoeType.Name</MudTd>
                <MudTd>@stock.Size</MudTd>
                <MudTd>@stock.Color.Name</MudTd>
                <MudTd>@stock.Count</MudTd>
                <MudTd>@stock.Price.ToString("C")</MudTd>
            </RowTemplate>
            <RowEditingTemplate Context="stock">
                <MudTd>
                    <MudSelect T="Brand" @bind-Value="stock.Brand" Required>
                        @foreach (var brand in _brands)
                        {
                            <MudSelectItem Value="brand">@brand.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudSelect T="ShoeType" @bind-Value="stock.ShoeType" Required>
                        @foreach (var shoeType in _shoeTypes)
                        {
                            <MudSelectItem Value="shoeType">@shoeType.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudTextField @bind-Value="stock.Size" Required />
                </MudTd>
                <MudTd>
                    <MudSelect T="GimpiesBlazor.Models.Entities.Color" @bind-Value="stock.Color" Required>
                        @foreach (var color in _colors)
                        {
                            <MudSelectItem Value="color">@color.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd> <MudTextField @bind-Value="stock.Count" Required /> </MudTd>
                <MudTd> <MudTextField @bind-Value="stock.Price" Required /> </MudTd>
            </RowEditingTemplate>


            <PagerContent>
                <MudTablePager />
            </PagerContent>

            <EditButtonContent Context="button">
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="false" />
            </EditButtonContent>
        </MudTable>
        
        <MudButton Size="@Size.Small" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddBrandDialog">Merk toevoegen</MudButton>
        <MudButton Size="@Size.Small" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddShoeTypeDialog">Type toevoegen</MudButton>
        <MudButton Size="@Size.Small" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddColorDialog">Kleur toevoegen</MudButton>


    </Authorized>

    <NotAuthorized>
        <Login />
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<GimpiesBlazor.Models.Entities.Stock> _stockList = new();
    private bool _loadingStock = false;
    private HashSet<GimpiesBlazor.Models.Entities.Stock> _selectedStock = new();

    private List<Brand> _brands = new();
    private List<ShoeType> _shoeTypes = new();
    private List<GimpiesBlazor.Models.Entities.Color> _colors = new();


    protected override async Task OnInitializedAsync()
    {
        await LoadAnim();
        await LoadData();
        await LoadStock();
    }

    private async Task LoadData()
    {
        _brands = await StockManager.GetBrands();
        _shoeTypes = await StockManager.GetShoeTypes();
        _colors = await StockManager.GetColors();
    }

    private async Task LoadStock()
    {
        _stockList = await StockManager.GetStock();
    }

    private async Task AddShoe()
    {
        var dialog = await DialogService.ShowAsync<DialogAddShoe>("Nieuwe Schoen Toevoegen");
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            var newShoe = result.Data as GimpiesBlazor.Models.Entities.Stock;

            if (newShoe != null)
            {
                await StockManager.AddStock(newShoe);
                Snackbar.Add("Schoen toegevoegd", Severity.Success);

                await LoadStock();
            }
        }
    }

    private async Task DeleteShoe()
    {
        if (!_selectedStock.Any())
        {
            Snackbar.Add("Geen schoenen geselecteerd om te verwijderen.", Severity.Warning);
            return;
        }

        var dialog = await DialogService.ShowAsync<DialogAreYouSure>("Weet je het zeker?");
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            foreach (var shoe in _selectedStock)
            {
                await StockManager.DeleteStock(shoe.StockId);
            }

            Snackbar.Add($"{_selectedStock.Count} schoen(en) verwijderd.", Severity.Success);

            await LoadStock();
            _selectedStock.Clear();
        }
    }

    private async Task LoadAnim(){
        _loadingStock = true;
        await Task.Delay(500);
        _loadingStock = false;
    }

    private async Task ChangesMade(object element)
    {
        if (element is GimpiesBlazor.Models.Entities.Stock updatedStock)
        {
            updatedStock.Brand = await StockManager.GetBrandById(updatedStock.SelectedBrandId);
            updatedStock.ShoeType = await StockManager.GetShoeTypeById(updatedStock.SelectedShoeTypeId);
            updatedStock.Color = await StockManager.GetColorById(updatedStock.SelectedColorId);

            await StockManager.UpdateStock(updatedStock);
            Snackbar.Add("Wijzigingen zijn opgeslagen!", Severity.Success);
            await LoadStock();
        }
    }

    private async Task AddBrandDialog()
    {
        var dialog = await DialogService.ShowAsync<DialogAddBrand>("Nieuw merk toevoegen");
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await LoadData();
            Snackbar.Add("Merk succesvol toegevoegd!", Severity.Success);
        }
    }

    private async Task AddShoeTypeDialog()
    {
        var dialog = await DialogService.ShowAsync<DialogAddShoeType>("Nieuw type toevoegen");
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await LoadData();
            Snackbar.Add("Type succesvol toegevoegd!", Severity.Success);
        }
    }

    private async Task AddColorDialog()
    {
        var dialog = await DialogService.ShowAsync<DialogAddColor>("Nieuwe kleur toevoegen");
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await LoadData();
            Snackbar.Add("Kleur succesvol toegevoegd!", Severity.Success);
        }
    }
}
