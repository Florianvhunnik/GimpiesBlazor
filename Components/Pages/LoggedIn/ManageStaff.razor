@page "/manage_staff"
@using GimpiesBlazor.Components.Dialogs
@using GimpiesBlazor.Managers
@using GimpiesBlazor.Models.Entities
@inject AccountManager AccountManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Medewerkers beheren</PageTitle>

<MudTable Items="_accountList"
          Hover="true"
          Loading="@_loadingAccounts"
          LoadingProgressColor="MudBlazor.Color.Primary"
          CanCancelEdit="true"
          EditTrigger="TableEditTrigger.EditButton"
          EditButtonPosition="TableEditButtonPosition.End"
          MultiSelection="true"
          @bind-SelectedItems="_selectedAccounts"
          RowEditCommit="async (changes) => await ChangesMade(changes)">
    <ToolBarContent>
        <MudButton Size="@Size.Large" Color="MudBlazor.Color.Success" StartIcon="@Icons.Material.Filled.PersonAdd" OnClick="OpenAddAccountDialog"></MudButton>
        <MudButton Size="@Size.Large" Color="MudBlazor.Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="DeleteSelectedAccounts"></MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Gebruikersnaam</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Rol</MudTh>
        <MudTh>Status</MudTh>
    </HeaderContent>
    <RowTemplate Context="account">
        <MudTd>@account.Username</MudTd>
        <MudTd>@account.Email</MudTd>
        <MudTd>@(account.Role?.RoleName ?? "Refresh")</MudTd>
        <MudTd>@(account.IsActive ? "Actief" : "Niet Actief")</MudTd>
    </RowTemplate>
    <RowEditingTemplate Context="account">
        <MudTd><MudTextField @bind-Value="account.Username" Required /></MudTd>
        <MudTd><MudTextField @bind-Value="account.Email" Required /></MudTd>
        <MudTd>
            <MudSelect T="int" @bind-Value="account.FkRoleId" Required>
                @foreach (var role in _roles)
                {
                    <MudSelectItem Value="role.RoleId">@role.RoleName</MudSelectItem>
                }
            </MudSelect>
        </MudTd>
        <MudTd>
            <MudSelect @bind-Value="account.IsActive">
                <MudSelectItem Value="true">Actief</MudSelectItem>
                <MudSelectItem Value="false">Niet Actief</MudSelectItem>
            </MudSelect>
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; } = default!;

    private List<Account> _accountList = new();
    private List<Role> _roles = new();

    private bool _loadingAccounts = false;

    private HashSet<GimpiesBlazor.Models.Entities.Account> _selectedAccounts = new();

    private int _currentUserAccountId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateTask;
        var user = authState.User;
        var accountIdClaim = user.FindFirst("AccountId");

        if (accountIdClaim != null)
        {
            _currentUserAccountId = int.Parse(accountIdClaim.Value);
        }     

        await LoadAccounts();
        await LoadRoles();
    }

    private async Task LoadAccounts()
    {
        await LoadAnim();
        _accountList = await AccountManager.GetAllAccountsExcept(_currentUserAccountId);
    }

    private async Task LoadRoles()
    {
        _roles = await AccountManager.GetAllRoles();
    }

    private async Task LoadAnim()
    {
        _loadingAccounts = true;
        await Task.Delay(500);
        _loadingAccounts = false;
    }

    private async Task ChangesMade(object element)
    {
        if (element is GimpiesBlazor.Models.Entities.Account account)
        {
            if (!await AccountManager.UpdateAccount(account))
            {
                Snackbar.Add("Fout bij het bijwerken van account!", Severity.Error);
                return;
            }

            await LoadAccounts();

            Snackbar.Add("Account succesvol bijgewerkt!", Severity.Success);
        }
    }

    private async Task OpenAddAccountDialog()
    {
        var dialog = await DialogService.ShowAsync<DialogAddAccount>("Nieuw account toevoegen");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadAccounts();
            Snackbar.Add("Account succesvol toegevoegd!", Severity.Success);
        }
    }

    private async Task DeleteSelectedAccounts()
    {
        if (!_selectedAccounts.Any())
        {
            Snackbar.Add("Geen accounts geselecteerd om te verwijderen.", Severity.Warning);
            return;
        }

        var dialog = await DialogService.ShowAsync<DialogAreYouSure>("Weet je het zeker?");
        var result = await dialog.Result;
        if (result.Canceled) return;

        foreach (var account in _selectedAccounts)
        {
            Console.WriteLine(_currentUserAccountId);
            Console.WriteLine(account.AccountId);
            if (account.AccountId == _currentUserAccountId)
            {
                Snackbar.Add("Je kan jezelf niet verwijderen!", Severity.Warning);
                continue;
            }

            await AccountManager.SoftDeleteAccount(account.AccountId);
        }

        await LoadAccounts();
        Snackbar.Add($"{_selectedAccounts.Count} accounts verwijderd!", Severity.Success);
        _selectedAccounts.Clear();
    }
}
